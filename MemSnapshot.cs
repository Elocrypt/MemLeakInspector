using static MemLeakInspector.InstanceTracker;

namespace MemLeakInspector
{
    /// <summary>
    /// Represents a snapshot of the current managed memory state, including object counts,
    /// estimated memory usage, and optionally tracked instance identifiers and positions.
    /// </summary>
    /// <remarks>
    /// <para>Snapshots are typically generated by calling <c>TakeSnapshot()</c> inside the mod system.</para>
    /// <para>This structure is serializable to JSON and is the core data structure for comparisons and exports.</para>
    /// </remarks>
    public class MemSnapshot
    {
        /// <summary>
        /// The UTC time when the snapshot was captured.
        /// </summary>
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// The total amount of managed memory (in bytes) reported by the garbage collector at the time of the snapshot.
        /// </summary>
        public long TotalManagedMemoryBytes { get; set; }

        /// <summary>
        /// The number of live objects grouped by type name.
        /// </summary>
        public Dictionary<string, int> ObjectCountsByType { get; set; } = new();

        /// <summary>
        /// (Optional) Estimated per-instance memory cost for each type, if size analysis was enabled or cached.
        /// </summary>
        public Dictionary<string, int>? EstimatedBytesPerType { get; set; }

        /// <summary>
        /// Estimated total memory usage per type based on count × estimated size.
        /// </summary>
        public Dictionary<string, long> EstimatedMemoryBytesPerType { get; set; } = new();

        /// <summary>
        /// (Optional) Detailed tracked instance data such as entity IDs or block positions, grouped by type.
        /// </summary>
        /// <remarks>
        /// Enabled via the <c>TrackIndividualEntities</c> config option. Used for highlighting and diffing.
        /// </remarks>
        public Dictionary<string, List<InstanceInfo>>? TrackedInstancesByType { get; set; }

    }
}
